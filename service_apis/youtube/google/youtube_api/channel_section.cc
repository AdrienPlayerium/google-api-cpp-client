// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Description:
//   Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
// Classes:
//   ChannelSection
// Documentation:
//   https://developers.google.com/youtube/v3

#include "google/youtube_api/channel_section.h"
#include <string>
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/channel_section_content_details.h"
#include "google/youtube_api/channel_section_localization.h"
#include "google/youtube_api/channel_section_snippet.h"
#include "google/youtube_api/channel_section_targeting.h"


#include <string>
#include "googleapis/strings/strcat.h"

namespace google_youtube_api {
using namespace googleapis;


// Object factory method (static).
ChannelSection* ChannelSection::New() {
  return new client::JsonCppCapsule<ChannelSection>;
}

// Standard immutable constructor.
ChannelSection::ChannelSection(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
ChannelSection::ChannelSection(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
ChannelSection::~ChannelSection() {
}

// Properties.

const ChannelSectionContentDetails ChannelSection::get_content_details() const {
   const Json::Value& storage = Storage("contentDetails");
   return client::JsonValueToCppValueHelper<ChannelSectionContentDetails >(storage);
}

ChannelSectionContentDetails ChannelSection::mutable_contentDetails() {
  Json::Value* storage = MutableStorage("contentDetails");
  return client::JsonValueToMutableCppValueHelper<ChannelSectionContentDetails >(storage);
}

const client::JsonCppAssociativeArray<ChannelSectionLocalization > ChannelSection::get_localizations() const {
   const Json::Value& storage = Storage("localizations");
   return client::JsonValueToCppValueHelper<client::JsonCppAssociativeArray<ChannelSectionLocalization > >(storage);
}

client::JsonCppAssociativeArray<ChannelSectionLocalization > ChannelSection::mutable_localizations() {
  Json::Value* storage = MutableStorage("localizations");
  return client::JsonValueToMutableCppValueHelper<client::JsonCppAssociativeArray<ChannelSectionLocalization > >(storage);
}

const ChannelSectionSnippet ChannelSection::get_snippet() const {
   const Json::Value& storage = Storage("snippet");
   return client::JsonValueToCppValueHelper<ChannelSectionSnippet >(storage);
}

ChannelSectionSnippet ChannelSection::mutable_snippet() {
  Json::Value* storage = MutableStorage("snippet");
  return client::JsonValueToMutableCppValueHelper<ChannelSectionSnippet >(storage);
}

const ChannelSectionTargeting ChannelSection::get_targeting() const {
   const Json::Value& storage = Storage("targeting");
   return client::JsonValueToCppValueHelper<ChannelSectionTargeting >(storage);
}

ChannelSectionTargeting ChannelSection::mutable_targeting() {
  Json::Value* storage = MutableStorage("targeting");
  return client::JsonValueToMutableCppValueHelper<ChannelSectionTargeting >(storage);
}
}  // namespace google_youtube_api
