// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Description:
//   Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
// Classes:
//   ActivityContentDetails
// Documentation:
//   https://developers.google.com/youtube/v3

#include "google/youtube_api/activity_content_details.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/activity_content_details_bulletin.h"
#include "google/youtube_api/activity_content_details_channel_item.h"
#include "google/youtube_api/activity_content_details_comment.h"
#include "google/youtube_api/activity_content_details_favorite.h"
#include "google/youtube_api/activity_content_details_like.h"
#include "google/youtube_api/activity_content_details_playlist_item.h"
#include "google/youtube_api/activity_content_details_promoted_item.h"
#include "google/youtube_api/activity_content_details_recommendation.h"
#include "google/youtube_api/activity_content_details_social.h"
#include "google/youtube_api/activity_content_details_subscription.h"
#include "google/youtube_api/activity_content_details_upload.h"


#include <string>
#include "googleapis/strings/strcat.h"

namespace google_youtube_api {
using namespace googleapis;


// Object factory method (static).
ActivityContentDetails* ActivityContentDetails::New() {
  return new client::JsonCppCapsule<ActivityContentDetails>;
}

// Standard immutable constructor.
ActivityContentDetails::ActivityContentDetails(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
ActivityContentDetails::ActivityContentDetails(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
ActivityContentDetails::~ActivityContentDetails() {
}

// Properties.

const ActivityContentDetailsBulletin ActivityContentDetails::get_bulletin() const {
   const Json::Value& storage = Storage("bulletin");
   return client::JsonValueToCppValueHelper<ActivityContentDetailsBulletin >(storage);
}

ActivityContentDetailsBulletin ActivityContentDetails::mutable_bulletin() {
  Json::Value* storage = MutableStorage("bulletin");
  return client::JsonValueToMutableCppValueHelper<ActivityContentDetailsBulletin >(storage);
}

const ActivityContentDetailsChannelItem ActivityContentDetails::get_channel_item() const {
   const Json::Value& storage = Storage("channelItem");
   return client::JsonValueToCppValueHelper<ActivityContentDetailsChannelItem >(storage);
}

ActivityContentDetailsChannelItem ActivityContentDetails::mutable_channelItem() {
  Json::Value* storage = MutableStorage("channelItem");
  return client::JsonValueToMutableCppValueHelper<ActivityContentDetailsChannelItem >(storage);
}

const ActivityContentDetailsComment ActivityContentDetails::get_comment() const {
   const Json::Value& storage = Storage("comment");
   return client::JsonValueToCppValueHelper<ActivityContentDetailsComment >(storage);
}

ActivityContentDetailsComment ActivityContentDetails::mutable_comment() {
  Json::Value* storage = MutableStorage("comment");
  return client::JsonValueToMutableCppValueHelper<ActivityContentDetailsComment >(storage);
}

const ActivityContentDetailsFavorite ActivityContentDetails::get_favorite() const {
   const Json::Value& storage = Storage("favorite");
   return client::JsonValueToCppValueHelper<ActivityContentDetailsFavorite >(storage);
}

ActivityContentDetailsFavorite ActivityContentDetails::mutable_favorite() {
  Json::Value* storage = MutableStorage("favorite");
  return client::JsonValueToMutableCppValueHelper<ActivityContentDetailsFavorite >(storage);
}

const ActivityContentDetailsLike ActivityContentDetails::get_like() const {
   const Json::Value& storage = Storage("like");
   return client::JsonValueToCppValueHelper<ActivityContentDetailsLike >(storage);
}

ActivityContentDetailsLike ActivityContentDetails::mutable_like() {
  Json::Value* storage = MutableStorage("like");
  return client::JsonValueToMutableCppValueHelper<ActivityContentDetailsLike >(storage);
}

const ActivityContentDetailsPlaylistItem ActivityContentDetails::get_playlist_item() const {
   const Json::Value& storage = Storage("playlistItem");
   return client::JsonValueToCppValueHelper<ActivityContentDetailsPlaylistItem >(storage);
}

ActivityContentDetailsPlaylistItem ActivityContentDetails::mutable_playlistItem() {
  Json::Value* storage = MutableStorage("playlistItem");
  return client::JsonValueToMutableCppValueHelper<ActivityContentDetailsPlaylistItem >(storage);
}

const ActivityContentDetailsPromotedItem ActivityContentDetails::get_promoted_item() const {
   const Json::Value& storage = Storage("promotedItem");
   return client::JsonValueToCppValueHelper<ActivityContentDetailsPromotedItem >(storage);
}

ActivityContentDetailsPromotedItem ActivityContentDetails::mutable_promotedItem() {
  Json::Value* storage = MutableStorage("promotedItem");
  return client::JsonValueToMutableCppValueHelper<ActivityContentDetailsPromotedItem >(storage);
}

const ActivityContentDetailsRecommendation ActivityContentDetails::get_recommendation() const {
   const Json::Value& storage = Storage("recommendation");
   return client::JsonValueToCppValueHelper<ActivityContentDetailsRecommendation >(storage);
}

ActivityContentDetailsRecommendation ActivityContentDetails::mutable_recommendation() {
  Json::Value* storage = MutableStorage("recommendation");
  return client::JsonValueToMutableCppValueHelper<ActivityContentDetailsRecommendation >(storage);
}

const ActivityContentDetailsSocial ActivityContentDetails::get_social() const {
   const Json::Value& storage = Storage("social");
   return client::JsonValueToCppValueHelper<ActivityContentDetailsSocial >(storage);
}

ActivityContentDetailsSocial ActivityContentDetails::mutable_social() {
  Json::Value* storage = MutableStorage("social");
  return client::JsonValueToMutableCppValueHelper<ActivityContentDetailsSocial >(storage);
}

const ActivityContentDetailsSubscription ActivityContentDetails::get_subscription() const {
   const Json::Value& storage = Storage("subscription");
   return client::JsonValueToCppValueHelper<ActivityContentDetailsSubscription >(storage);
}

ActivityContentDetailsSubscription ActivityContentDetails::mutable_subscription() {
  Json::Value* storage = MutableStorage("subscription");
  return client::JsonValueToMutableCppValueHelper<ActivityContentDetailsSubscription >(storage);
}

const ActivityContentDetailsUpload ActivityContentDetails::get_upload() const {
   const Json::Value& storage = Storage("upload");
   return client::JsonValueToCppValueHelper<ActivityContentDetailsUpload >(storage);
}

ActivityContentDetailsUpload ActivityContentDetails::mutable_upload() {
  Json::Value* storage = MutableStorage("upload");
  return client::JsonValueToMutableCppValueHelper<ActivityContentDetailsUpload >(storage);
}
}  // namespace google_youtube_api
