// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.0
//   Build date: 2014-11-17 18:43:33 UTC
//   on: 2014-12-11, 22:05:47 UTC
//   C++ generator version:

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
//   Revision: 125
// Generated by:
//    Tool: google-apis-code-generator 1.5.0
//     C++: 0.1.2
#ifndef  GOOGLE_YOUTUBE_API_INVIDEO_PROMOTION_H_
#define  GOOGLE_YOUTUBE_API_INVIDEO_PROMOTION_H_

#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/invideo_position.h"
#include "google/youtube_api/invideo_timing.h"
#include "google/youtube_api/promoted_item.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Describes an invideo promotion campaign consisting of multiple promoted
 * items. A campaign belongs to a single channel_id.
 *
 * @ingroup DataObject
 */
class InvideoPromotion : public client::JsonCppData {
 public:

  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static InvideoPromotion* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit InvideoPromotion(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit InvideoPromotion(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~InvideoPromotion();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::InvideoPromotion</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::InvideoPromotion");
  }

  /**
   * Determine if the '<code>defaultTiming</code>' attribute was set.
   *
   * @return true if the '<code>defaultTiming</code>' attribute was set.
   */
  bool has_default_timing() const {
    return Storage().isMember("defaultTiming");
  }

  /**
   * Clears the '<code>defaultTiming</code>' attribute.
   */
  void clear_default_timing() {
    MutableStorage()->removeMember("defaultTiming");
  }


  /**
   * Get a reference to the value of the '<code>defaultTiming</code>' attribute.
   */
  const InvideoTiming get_default_timing() const {
     const Json::Value& storage = Storage("defaultTiming");
    return client::JsonValueToCppValueHelper<InvideoTiming >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>defaultTiming</code>'
   * property.
   *
   * The default temporal position within the video where the promoted item will
   * be displayed. Can be overriden by more specific timing in the item.
   *
   * @return The result can be modified to change the attribute value.
   */
  InvideoTiming mutable_defaultTiming() {
    Json::Value* storage = MutableStorage("defaultTiming");
    return client::JsonValueToMutableCppValueHelper<InvideoTiming >(storage);
  }

  /**
   * Determine if the '<code>items</code>' attribute was set.
   *
   * @return true if the '<code>items</code>' attribute was set.
   */
  bool has_items() const {
    return Storage().isMember("items");
  }

  /**
   * Clears the '<code>items</code>' attribute.
   */
  void clear_items() {
    MutableStorage()->removeMember("items");
  }


  /**
   * Get a reference to the value of the '<code>items</code>' attribute.
   */
  const client::JsonCppArray<PromotedItem > get_items() const {
     const Json::Value& storage = Storage("items");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<PromotedItem > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>items</code>' property.
   *
   * List of promoted items in decreasing priority.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<PromotedItem > mutable_items() {
    Json::Value* storage = MutableStorage("items");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<PromotedItem > >(storage);
  }

  /**
   * Determine if the '<code>position</code>' attribute was set.
   *
   * @return true if the '<code>position</code>' attribute was set.
   */
  bool has_position() const {
    return Storage().isMember("position");
  }

  /**
   * Clears the '<code>position</code>' attribute.
   */
  void clear_position() {
    MutableStorage()->removeMember("position");
  }


  /**
   * Get a reference to the value of the '<code>position</code>' attribute.
   */
  const InvideoPosition get_position() const {
     const Json::Value& storage = Storage("position");
    return client::JsonValueToCppValueHelper<InvideoPosition >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>position</code>'
   * property.
   *
   * The spatial position within the video where the promoted item will be
   * displayed.
   *
   * @return The result can be modified to change the attribute value.
   */
  InvideoPosition mutable_position() {
    Json::Value* storage = MutableStorage("position");
    return client::JsonValueToMutableCppValueHelper<InvideoPosition >(storage);
  }

  /**
   * Determine if the '<code>useSmartTiming</code>' attribute was set.
   *
   * @return true if the '<code>useSmartTiming</code>' attribute was set.
   */
  bool has_use_smart_timing() const {
    return Storage().isMember("useSmartTiming");
  }

  /**
   * Clears the '<code>useSmartTiming</code>' attribute.
   */
  void clear_use_smart_timing() {
    MutableStorage()->removeMember("useSmartTiming");
  }


  /**
   * Get the value of the '<code>useSmartTiming</code>' attribute.
   */
  bool get_use_smart_timing() const {
    const Json::Value& storage = Storage("useSmartTiming");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>useSmartTiming</code>' attribute.
   *
   * Indicates whether the channel's promotional campaign uses "smart timing."
   * This feature attempts to show promotions at a point in the video when they
   * are more likely to be clicked and less likely to disrupt the viewing
   * experience. This feature also picks up a single promotion to show on each
   * video.
   *
   * @param[in] value The new value.
   */
  void set_use_smart_timing(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("useSmartTiming"));
  }

 private:
  void operator=(const InvideoPromotion&);
};  // InvideoPromotion
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_INVIDEO_PROMOTION_H_
