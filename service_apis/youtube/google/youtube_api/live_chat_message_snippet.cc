// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Description:
//   Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
// Classes:
//   LiveChatMessageSnippet
// Documentation:
//   https://developers.google.com/youtube/v3

#include "google/youtube_api/live_chat_message_snippet.h"
#include <string>
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/live_chat_fan_funding_event_details.h"
#include "google/youtube_api/live_chat_message_deleted_details.h"
#include "google/youtube_api/live_chat_message_retracted_details.h"
#include "google/youtube_api/live_chat_poll_closed_details.h"
#include "google/youtube_api/live_chat_poll_edited_details.h"
#include "google/youtube_api/live_chat_poll_opened_details.h"
#include "google/youtube_api/live_chat_poll_voted_details.h"
#include "google/youtube_api/live_chat_super_chat_details.h"
#include "google/youtube_api/live_chat_text_message_details.h"
#include "google/youtube_api/live_chat_user_banned_message_details.h"


#include <string>
#include "googleapis/strings/strcat.h"

namespace google_youtube_api {
using namespace googleapis;


// Object factory method (static).
LiveChatMessageSnippet* LiveChatMessageSnippet::New() {
  return new client::JsonCppCapsule<LiveChatMessageSnippet>;
}

// Standard immutable constructor.
LiveChatMessageSnippet::LiveChatMessageSnippet(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
LiveChatMessageSnippet::LiveChatMessageSnippet(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
LiveChatMessageSnippet::~LiveChatMessageSnippet() {
}

// Properties.

const LiveChatFanFundingEventDetails LiveChatMessageSnippet::get_fan_funding_event_details() const {
   const Json::Value& storage = Storage("fanFundingEventDetails");
   return client::JsonValueToCppValueHelper<LiveChatFanFundingEventDetails >(storage);
}

LiveChatFanFundingEventDetails LiveChatMessageSnippet::mutable_fanFundingEventDetails() {
  Json::Value* storage = MutableStorage("fanFundingEventDetails");
  return client::JsonValueToMutableCppValueHelper<LiveChatFanFundingEventDetails >(storage);
}

const LiveChatMessageDeletedDetails LiveChatMessageSnippet::get_message_deleted_details() const {
   const Json::Value& storage = Storage("messageDeletedDetails");
   return client::JsonValueToCppValueHelper<LiveChatMessageDeletedDetails >(storage);
}

LiveChatMessageDeletedDetails LiveChatMessageSnippet::mutable_messageDeletedDetails() {
  Json::Value* storage = MutableStorage("messageDeletedDetails");
  return client::JsonValueToMutableCppValueHelper<LiveChatMessageDeletedDetails >(storage);
}

const LiveChatMessageRetractedDetails LiveChatMessageSnippet::get_message_retracted_details() const {
   const Json::Value& storage = Storage("messageRetractedDetails");
   return client::JsonValueToCppValueHelper<LiveChatMessageRetractedDetails >(storage);
}

LiveChatMessageRetractedDetails LiveChatMessageSnippet::mutable_messageRetractedDetails() {
  Json::Value* storage = MutableStorage("messageRetractedDetails");
  return client::JsonValueToMutableCppValueHelper<LiveChatMessageRetractedDetails >(storage);
}

const LiveChatPollClosedDetails LiveChatMessageSnippet::get_poll_closed_details() const {
   const Json::Value& storage = Storage("pollClosedDetails");
   return client::JsonValueToCppValueHelper<LiveChatPollClosedDetails >(storage);
}

LiveChatPollClosedDetails LiveChatMessageSnippet::mutable_pollClosedDetails() {
  Json::Value* storage = MutableStorage("pollClosedDetails");
  return client::JsonValueToMutableCppValueHelper<LiveChatPollClosedDetails >(storage);
}

const LiveChatPollEditedDetails LiveChatMessageSnippet::get_poll_edited_details() const {
   const Json::Value& storage = Storage("pollEditedDetails");
   return client::JsonValueToCppValueHelper<LiveChatPollEditedDetails >(storage);
}

LiveChatPollEditedDetails LiveChatMessageSnippet::mutable_pollEditedDetails() {
  Json::Value* storage = MutableStorage("pollEditedDetails");
  return client::JsonValueToMutableCppValueHelper<LiveChatPollEditedDetails >(storage);
}

const LiveChatPollOpenedDetails LiveChatMessageSnippet::get_poll_opened_details() const {
   const Json::Value& storage = Storage("pollOpenedDetails");
   return client::JsonValueToCppValueHelper<LiveChatPollOpenedDetails >(storage);
}

LiveChatPollOpenedDetails LiveChatMessageSnippet::mutable_pollOpenedDetails() {
  Json::Value* storage = MutableStorage("pollOpenedDetails");
  return client::JsonValueToMutableCppValueHelper<LiveChatPollOpenedDetails >(storage);
}

const LiveChatPollVotedDetails LiveChatMessageSnippet::get_poll_voted_details() const {
   const Json::Value& storage = Storage("pollVotedDetails");
   return client::JsonValueToCppValueHelper<LiveChatPollVotedDetails >(storage);
}

LiveChatPollVotedDetails LiveChatMessageSnippet::mutable_pollVotedDetails() {
  Json::Value* storage = MutableStorage("pollVotedDetails");
  return client::JsonValueToMutableCppValueHelper<LiveChatPollVotedDetails >(storage);
}

const LiveChatSuperChatDetails LiveChatMessageSnippet::get_super_chat_details() const {
   const Json::Value& storage = Storage("superChatDetails");
   return client::JsonValueToCppValueHelper<LiveChatSuperChatDetails >(storage);
}

LiveChatSuperChatDetails LiveChatMessageSnippet::mutable_superChatDetails() {
  Json::Value* storage = MutableStorage("superChatDetails");
  return client::JsonValueToMutableCppValueHelper<LiveChatSuperChatDetails >(storage);
}

const LiveChatTextMessageDetails LiveChatMessageSnippet::get_text_message_details() const {
   const Json::Value& storage = Storage("textMessageDetails");
   return client::JsonValueToCppValueHelper<LiveChatTextMessageDetails >(storage);
}

LiveChatTextMessageDetails LiveChatMessageSnippet::mutable_textMessageDetails() {
  Json::Value* storage = MutableStorage("textMessageDetails");
  return client::JsonValueToMutableCppValueHelper<LiveChatTextMessageDetails >(storage);
}

const LiveChatUserBannedMessageDetails LiveChatMessageSnippet::get_user_banned_details() const {
   const Json::Value& storage = Storage("userBannedDetails");
   return client::JsonValueToCppValueHelper<LiveChatUserBannedMessageDetails >(storage);
}

LiveChatUserBannedMessageDetails LiveChatMessageSnippet::mutable_userBannedDetails() {
  Json::Value* storage = MutableStorage("userBannedDetails");
  return client::JsonValueToMutableCppValueHelper<LiveChatUserBannedMessageDetails >(storage);
}
}  // namespace google_youtube_api
