// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Description:
//   Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
// Classes:
//   Channel
// Documentation:
//   https://developers.google.com/youtube/v3

#include "google/youtube_api/channel.h"
#include <string>
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/channel_audit_details.h"
#include "google/youtube_api/channel_branding_settings.h"
#include "google/youtube_api/channel_content_details.h"
#include "google/youtube_api/channel_content_owner_details.h"
#include "google/youtube_api/channel_conversion_pings.h"
#include "google/youtube_api/channel_localization.h"
#include "google/youtube_api/channel_snippet.h"
#include "google/youtube_api/channel_statistics.h"
#include "google/youtube_api/channel_status.h"
#include "google/youtube_api/channel_topic_details.h"
#include "google/youtube_api/invideo_promotion.h"


#include <string>
#include "googleapis/strings/strcat.h"

namespace google_youtube_api {
using namespace googleapis;


// Object factory method (static).
Channel* Channel::New() {
  return new client::JsonCppCapsule<Channel>;
}

// Standard immutable constructor.
Channel::Channel(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
Channel::Channel(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
Channel::~Channel() {
}

// Properties.

const ChannelAuditDetails Channel::get_audit_details() const {
   const Json::Value& storage = Storage("auditDetails");
   return client::JsonValueToCppValueHelper<ChannelAuditDetails >(storage);
}

ChannelAuditDetails Channel::mutable_auditDetails() {
  Json::Value* storage = MutableStorage("auditDetails");
  return client::JsonValueToMutableCppValueHelper<ChannelAuditDetails >(storage);
}

const ChannelBrandingSettings Channel::get_branding_settings() const {
   const Json::Value& storage = Storage("brandingSettings");
   return client::JsonValueToCppValueHelper<ChannelBrandingSettings >(storage);
}

ChannelBrandingSettings Channel::mutable_brandingSettings() {
  Json::Value* storage = MutableStorage("brandingSettings");
  return client::JsonValueToMutableCppValueHelper<ChannelBrandingSettings >(storage);
}

const ChannelContentDetails Channel::get_content_details() const {
   const Json::Value& storage = Storage("contentDetails");
   return client::JsonValueToCppValueHelper<ChannelContentDetails >(storage);
}

ChannelContentDetails Channel::mutable_contentDetails() {
  Json::Value* storage = MutableStorage("contentDetails");
  return client::JsonValueToMutableCppValueHelper<ChannelContentDetails >(storage);
}

const ChannelContentOwnerDetails Channel::get_content_owner_details() const {
   const Json::Value& storage = Storage("contentOwnerDetails");
   return client::JsonValueToCppValueHelper<ChannelContentOwnerDetails >(storage);
}

ChannelContentOwnerDetails Channel::mutable_contentOwnerDetails() {
  Json::Value* storage = MutableStorage("contentOwnerDetails");
  return client::JsonValueToMutableCppValueHelper<ChannelContentOwnerDetails >(storage);
}

const ChannelConversionPings Channel::get_conversion_pings() const {
   const Json::Value& storage = Storage("conversionPings");
   return client::JsonValueToCppValueHelper<ChannelConversionPings >(storage);
}

ChannelConversionPings Channel::mutable_conversionPings() {
  Json::Value* storage = MutableStorage("conversionPings");
  return client::JsonValueToMutableCppValueHelper<ChannelConversionPings >(storage);
}

const InvideoPromotion Channel::get_invideo_promotion() const {
   const Json::Value& storage = Storage("invideoPromotion");
   return client::JsonValueToCppValueHelper<InvideoPromotion >(storage);
}

InvideoPromotion Channel::mutable_invideoPromotion() {
  Json::Value* storage = MutableStorage("invideoPromotion");
  return client::JsonValueToMutableCppValueHelper<InvideoPromotion >(storage);
}

const client::JsonCppAssociativeArray<ChannelLocalization > Channel::get_localizations() const {
   const Json::Value& storage = Storage("localizations");
   return client::JsonValueToCppValueHelper<client::JsonCppAssociativeArray<ChannelLocalization > >(storage);
}

client::JsonCppAssociativeArray<ChannelLocalization > Channel::mutable_localizations() {
  Json::Value* storage = MutableStorage("localizations");
  return client::JsonValueToMutableCppValueHelper<client::JsonCppAssociativeArray<ChannelLocalization > >(storage);
}

const ChannelSnippet Channel::get_snippet() const {
   const Json::Value& storage = Storage("snippet");
   return client::JsonValueToCppValueHelper<ChannelSnippet >(storage);
}

ChannelSnippet Channel::mutable_snippet() {
  Json::Value* storage = MutableStorage("snippet");
  return client::JsonValueToMutableCppValueHelper<ChannelSnippet >(storage);
}

const ChannelStatistics Channel::get_statistics() const {
   const Json::Value& storage = Storage("statistics");
   return client::JsonValueToCppValueHelper<ChannelStatistics >(storage);
}

ChannelStatistics Channel::mutable_statistics() {
  Json::Value* storage = MutableStorage("statistics");
  return client::JsonValueToMutableCppValueHelper<ChannelStatistics >(storage);
}

const ChannelStatus Channel::get_status() const {
   const Json::Value& storage = Storage("status");
   return client::JsonValueToCppValueHelper<ChannelStatus >(storage);
}

ChannelStatus Channel::mutable_status() {
  Json::Value* storage = MutableStorage("status");
  return client::JsonValueToMutableCppValueHelper<ChannelStatus >(storage);
}

const ChannelTopicDetails Channel::get_topic_details() const {
   const Json::Value& storage = Storage("topicDetails");
   return client::JsonValueToCppValueHelper<ChannelTopicDetails >(storage);
}

ChannelTopicDetails Channel::mutable_topicDetails() {
  Json::Value* storage = MutableStorage("topicDetails");
  return client::JsonValueToMutableCppValueHelper<ChannelTopicDetails >(storage);
}
}  // namespace google_youtube_api
