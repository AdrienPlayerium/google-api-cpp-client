// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Description:
//   Supports core YouTube features, such as uploading videos, creating and managing playlists, searching for content, and much more.
// Classes:
//   Video
// Documentation:
//   https://developers.google.com/youtube/v3

#include "google/youtube_api/video.h"
#include <string>
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/video_age_gating.h"
#include "google/youtube_api/video_content_details.h"
#include "google/youtube_api/video_file_details.h"
#include "google/youtube_api/video_live_streaming_details.h"
#include "google/youtube_api/video_localization.h"
#include "google/youtube_api/video_monetization_details.h"
#include "google/youtube_api/video_player.h"
#include "google/youtube_api/video_processing_details.h"
#include "google/youtube_api/video_project_details.h"
#include "google/youtube_api/video_recording_details.h"
#include "google/youtube_api/video_snippet.h"
#include "google/youtube_api/video_statistics.h"
#include "google/youtube_api/video_status.h"
#include "google/youtube_api/video_suggestions.h"
#include "google/youtube_api/video_topic_details.h"


#include <string>
#include "googleapis/strings/strcat.h"

namespace google_youtube_api {
using namespace googleapis;


// Object factory method (static).
Video* Video::New() {
  return new client::JsonCppCapsule<Video>;
}

// Standard immutable constructor.
Video::Video(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
Video::Video(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
Video::~Video() {
}

// Properties.

const VideoAgeGating Video::get_age_gating() const {
   const Json::Value& storage = Storage("ageGating");
   return client::JsonValueToCppValueHelper<VideoAgeGating >(storage);
}

VideoAgeGating Video::mutable_ageGating() {
  Json::Value* storage = MutableStorage("ageGating");
  return client::JsonValueToMutableCppValueHelper<VideoAgeGating >(storage);
}

const VideoContentDetails Video::get_content_details() const {
   const Json::Value& storage = Storage("contentDetails");
   return client::JsonValueToCppValueHelper<VideoContentDetails >(storage);
}

VideoContentDetails Video::mutable_contentDetails() {
  Json::Value* storage = MutableStorage("contentDetails");
  return client::JsonValueToMutableCppValueHelper<VideoContentDetails >(storage);
}

const VideoFileDetails Video::get_file_details() const {
   const Json::Value& storage = Storage("fileDetails");
   return client::JsonValueToCppValueHelper<VideoFileDetails >(storage);
}

VideoFileDetails Video::mutable_fileDetails() {
  Json::Value* storage = MutableStorage("fileDetails");
  return client::JsonValueToMutableCppValueHelper<VideoFileDetails >(storage);
}

const VideoLiveStreamingDetails Video::get_live_streaming_details() const {
   const Json::Value& storage = Storage("liveStreamingDetails");
   return client::JsonValueToCppValueHelper<VideoLiveStreamingDetails >(storage);
}

VideoLiveStreamingDetails Video::mutable_liveStreamingDetails() {
  Json::Value* storage = MutableStorage("liveStreamingDetails");
  return client::JsonValueToMutableCppValueHelper<VideoLiveStreamingDetails >(storage);
}

const client::JsonCppAssociativeArray<VideoLocalization > Video::get_localizations() const {
   const Json::Value& storage = Storage("localizations");
   return client::JsonValueToCppValueHelper<client::JsonCppAssociativeArray<VideoLocalization > >(storage);
}

client::JsonCppAssociativeArray<VideoLocalization > Video::mutable_localizations() {
  Json::Value* storage = MutableStorage("localizations");
  return client::JsonValueToMutableCppValueHelper<client::JsonCppAssociativeArray<VideoLocalization > >(storage);
}

const VideoMonetizationDetails Video::get_monetization_details() const {
   const Json::Value& storage = Storage("monetizationDetails");
   return client::JsonValueToCppValueHelper<VideoMonetizationDetails >(storage);
}

VideoMonetizationDetails Video::mutable_monetizationDetails() {
  Json::Value* storage = MutableStorage("monetizationDetails");
  return client::JsonValueToMutableCppValueHelper<VideoMonetizationDetails >(storage);
}

const VideoPlayer Video::get_player() const {
   const Json::Value& storage = Storage("player");
   return client::JsonValueToCppValueHelper<VideoPlayer >(storage);
}

VideoPlayer Video::mutable_player() {
  Json::Value* storage = MutableStorage("player");
  return client::JsonValueToMutableCppValueHelper<VideoPlayer >(storage);
}

const VideoProcessingDetails Video::get_processing_details() const {
   const Json::Value& storage = Storage("processingDetails");
   return client::JsonValueToCppValueHelper<VideoProcessingDetails >(storage);
}

VideoProcessingDetails Video::mutable_processingDetails() {
  Json::Value* storage = MutableStorage("processingDetails");
  return client::JsonValueToMutableCppValueHelper<VideoProcessingDetails >(storage);
}

const VideoProjectDetails Video::get_project_details() const {
   const Json::Value& storage = Storage("projectDetails");
   return client::JsonValueToCppValueHelper<VideoProjectDetails >(storage);
}

VideoProjectDetails Video::mutable_projectDetails() {
  Json::Value* storage = MutableStorage("projectDetails");
  return client::JsonValueToMutableCppValueHelper<VideoProjectDetails >(storage);
}

const VideoRecordingDetails Video::get_recording_details() const {
   const Json::Value& storage = Storage("recordingDetails");
   return client::JsonValueToCppValueHelper<VideoRecordingDetails >(storage);
}

VideoRecordingDetails Video::mutable_recordingDetails() {
  Json::Value* storage = MutableStorage("recordingDetails");
  return client::JsonValueToMutableCppValueHelper<VideoRecordingDetails >(storage);
}

const VideoSnippet Video::get_snippet() const {
   const Json::Value& storage = Storage("snippet");
   return client::JsonValueToCppValueHelper<VideoSnippet >(storage);
}

VideoSnippet Video::mutable_snippet() {
  Json::Value* storage = MutableStorage("snippet");
  return client::JsonValueToMutableCppValueHelper<VideoSnippet >(storage);
}

const VideoStatistics Video::get_statistics() const {
   const Json::Value& storage = Storage("statistics");
   return client::JsonValueToCppValueHelper<VideoStatistics >(storage);
}

VideoStatistics Video::mutable_statistics() {
  Json::Value* storage = MutableStorage("statistics");
  return client::JsonValueToMutableCppValueHelper<VideoStatistics >(storage);
}

const VideoStatus Video::get_status() const {
   const Json::Value& storage = Storage("status");
   return client::JsonValueToCppValueHelper<VideoStatus >(storage);
}

VideoStatus Video::mutable_status() {
  Json::Value* storage = MutableStorage("status");
  return client::JsonValueToMutableCppValueHelper<VideoStatus >(storage);
}

const VideoSuggestions Video::get_suggestions() const {
   const Json::Value& storage = Storage("suggestions");
   return client::JsonValueToCppValueHelper<VideoSuggestions >(storage);
}

VideoSuggestions Video::mutable_suggestions() {
  Json::Value* storage = MutableStorage("suggestions");
  return client::JsonValueToMutableCppValueHelper<VideoSuggestions >(storage);
}

const VideoTopicDetails Video::get_topic_details() const {
   const Json::Value& storage = Storage("topicDetails");
   return client::JsonValueToCppValueHelper<VideoTopicDetails >(storage);
}

VideoTopicDetails Video::mutable_topicDetails() {
  Json::Value* storage = MutableStorage("topicDetails");
  return client::JsonValueToMutableCppValueHelper<VideoTopicDetails >(storage);
}
}  // namespace google_youtube_api
