// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Drive API (drive/v2)
// Generated from:
//   Version: v2
//   Revision: 20170512
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_DRIVE_API_TEAM_DRIVE_H_
#define  GOOGLE_DRIVE_API_TEAM_DRIVE_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_drive_api {
using namespace googleapis;

/**
 * Representation of a Team Drive.
 *
 * @ingroup DataObject
 */
class TeamDrive : public client::JsonCppData {
 public:
  /**
   * An image file and cropping parameters from which a background image for
   * this Team Drive is set. This is a write only field; it can only be set on
   * drive.teamdrives.update requests that don't set themeId. When specified,
   * all fields of the backgroundImageFile must be set.
   *
   * @ingroup DataObject
   */
  class TeamDriveBackgroundImageFile : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static TeamDriveBackgroundImageFile* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TeamDriveBackgroundImageFile(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TeamDriveBackgroundImageFile(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~TeamDriveBackgroundImageFile();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_drive_api::TeamDriveBackgroundImageFile</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_drive_api::TeamDriveBackgroundImageFile");
    }

    /**
     * Determine if the '<code>id</code>' attribute was set.
     *
     * @return true if the '<code>id</code>' attribute was set.
     */
    bool has_id() const {
      return Storage().isMember("id");
    }

    /**
     * Clears the '<code>id</code>' attribute.
     */
    void clear_id() {
      MutableStorage()->removeMember("id");
    }


    /**
     * Get the value of the '<code>id</code>' attribute.
     */
    const StringPiece get_id() const {
      const Json::Value& v = Storage("id");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>id</code>' attribute.
     *
     * The ID of an image file in Drive to use for the background image.
     *
     * @param[in] value The new value.
     */
    void set_id(const StringPiece& value) {
      *MutableStorage("id") = value.data();
    }

    /**
     * Determine if the '<code>width</code>' attribute was set.
     *
     * @return true if the '<code>width</code>' attribute was set.
     */
    bool has_width() const {
      return Storage().isMember("width");
    }

    /**
     * Clears the '<code>width</code>' attribute.
     */
    void clear_width() {
      MutableStorage()->removeMember("width");
    }


    /**
     * Get the value of the '<code>width</code>' attribute.
     */
    float get_width() const {
      const Json::Value& storage = Storage("width");
      return client::JsonValueToCppValueHelper<float >(storage);
    }

    /**
     * Change the '<code>width</code>' attribute.
     *
     * The width of the cropped image in the closed range of 0 to 1. This value
     * represents the width of the cropped image divided by the width of the
     * entire image. The height is computed by applying a width to height aspect
     * ratio of 80 to 9. The resulting image must be at least 1280 pixels wide
     * and 144 pixels high.
     *
     * @param[in] value The new value.
     */
    void set_width(float value) {
      client::SetJsonValueFromCppValueHelper<float >(
        value, MutableStorage("width"));
    }

    /**
     * Determine if the '<code>xCoordinate</code>' attribute was set.
     *
     * @return true if the '<code>xCoordinate</code>' attribute was set.
     */
    bool has_x_coordinate() const {
      return Storage().isMember("xCoordinate");
    }

    /**
     * Clears the '<code>xCoordinate</code>' attribute.
     */
    void clear_x_coordinate() {
      MutableStorage()->removeMember("xCoordinate");
    }


    /**
     * Get the value of the '<code>xCoordinate</code>' attribute.
     */
    float get_x_coordinate() const {
      const Json::Value& storage = Storage("xCoordinate");
      return client::JsonValueToCppValueHelper<float >(storage);
    }

    /**
     * Change the '<code>xCoordinate</code>' attribute.
     *
     * The X coordinate of the upper left corner of the cropping area in the
     * background image. This is a value in the closed range of 0 to 1. This
     * value represents the horizontal distance from the left side of the entire
     * image to the left side of the cropping area divided by the width of the
     * entire image.
     *
     * @param[in] value The new value.
     */
    void set_x_coordinate(float value) {
      client::SetJsonValueFromCppValueHelper<float >(
        value, MutableStorage("xCoordinate"));
    }

    /**
     * Determine if the '<code>yCoordinate</code>' attribute was set.
     *
     * @return true if the '<code>yCoordinate</code>' attribute was set.
     */
    bool has_y_coordinate() const {
      return Storage().isMember("yCoordinate");
    }

    /**
     * Clears the '<code>yCoordinate</code>' attribute.
     */
    void clear_y_coordinate() {
      MutableStorage()->removeMember("yCoordinate");
    }


    /**
     * Get the value of the '<code>yCoordinate</code>' attribute.
     */
    float get_y_coordinate() const {
      const Json::Value& storage = Storage("yCoordinate");
      return client::JsonValueToCppValueHelper<float >(storage);
    }

    /**
     * Change the '<code>yCoordinate</code>' attribute.
     *
     * The Y coordinate of the upper left corner of the cropping area in the
     * background image. This is a value in the closed range of 0 to 1. This
     * value represents the vertical distance from the top side of the entire
     * image to the top side of the cropping area divided by the height of the
     * entire image.
     *
     * @param[in] value The new value.
     */
    void set_y_coordinate(float value) {
      client::SetJsonValueFromCppValueHelper<float >(
        value, MutableStorage("yCoordinate"));
    }

   private:
    void operator=(const TeamDriveBackgroundImageFile&);
  };  // TeamDriveBackgroundImageFile
  /**
   * Capabilities the current user has on this Team Drive.
   *
   * @ingroup DataObject
   */
  class TeamDriveCapabilities : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static TeamDriveCapabilities* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TeamDriveCapabilities(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TeamDriveCapabilities(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~TeamDriveCapabilities();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_drive_api::TeamDriveCapabilities</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_drive_api::TeamDriveCapabilities");
    }

    /**
     * Determine if the '<code>canAddChildren</code>' attribute was set.
     *
     * @return true if the '<code>canAddChildren</code>' attribute was set.
     */
    bool has_can_add_children() const {
      return Storage().isMember("canAddChildren");
    }

    /**
     * Clears the '<code>canAddChildren</code>' attribute.
     */
    void clear_can_add_children() {
      MutableStorage()->removeMember("canAddChildren");
    }


    /**
     * Get the value of the '<code>canAddChildren</code>' attribute.
     */
    bool get_can_add_children() const {
      const Json::Value& storage = Storage("canAddChildren");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>canAddChildren</code>' attribute.
     *
     * Whether the current user can add children to folders in this Team Drive.
     *
     * @param[in] value The new value.
     */
    void set_can_add_children(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("canAddChildren"));
    }

    /**
     * Determine if the '<code>canChangeTeamDriveBackground</code>' attribute
     * was set.
     *
     * @return true if the '<code>canChangeTeamDriveBackground</code>' attribute
     * was set.
     */
    bool has_can_change_team_drive_background() const {
      return Storage().isMember("canChangeTeamDriveBackground");
    }

    /**
     * Clears the '<code>canChangeTeamDriveBackground</code>' attribute.
     */
    void clear_can_change_team_drive_background() {
      MutableStorage()->removeMember("canChangeTeamDriveBackground");
    }


    /**
     * Get the value of the '<code>canChangeTeamDriveBackground</code>'
     * attribute.
     */
    bool get_can_change_team_drive_background() const {
      const Json::Value& storage = Storage("canChangeTeamDriveBackground");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>canChangeTeamDriveBackground</code>' attribute.
     *
     * Whether the current user can change the background of this Team Drive.
     *
     * @param[in] value The new value.
     */
    void set_can_change_team_drive_background(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("canChangeTeamDriveBackground"));
    }

    /**
     * Determine if the '<code>canComment</code>' attribute was set.
     *
     * @return true if the '<code>canComment</code>' attribute was set.
     */
    bool has_can_comment() const {
      return Storage().isMember("canComment");
    }

    /**
     * Clears the '<code>canComment</code>' attribute.
     */
    void clear_can_comment() {
      MutableStorage()->removeMember("canComment");
    }


    /**
     * Get the value of the '<code>canComment</code>' attribute.
     */
    bool get_can_comment() const {
      const Json::Value& storage = Storage("canComment");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>canComment</code>' attribute.
     *
     * Whether the current user can comment on files in this Team Drive.
     *
     * @param[in] value The new value.
     */
    void set_can_comment(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("canComment"));
    }

    /**
     * Determine if the '<code>canCopy</code>' attribute was set.
     *
     * @return true if the '<code>canCopy</code>' attribute was set.
     */
    bool has_can_copy() const {
      return Storage().isMember("canCopy");
    }

    /**
     * Clears the '<code>canCopy</code>' attribute.
     */
    void clear_can_copy() {
      MutableStorage()->removeMember("canCopy");
    }


    /**
     * Get the value of the '<code>canCopy</code>' attribute.
     */
    bool get_can_copy() const {
      const Json::Value& storage = Storage("canCopy");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>canCopy</code>' attribute.
     *
     * Whether the current user can copy files in this Team Drive.
     *
     * @param[in] value The new value.
     */
    void set_can_copy(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("canCopy"));
    }

    /**
     * Determine if the '<code>canDeleteTeamDrive</code>' attribute was set.
     *
     * @return true if the '<code>canDeleteTeamDrive</code>' attribute was set.
     */
    bool has_can_delete_team_drive() const {
      return Storage().isMember("canDeleteTeamDrive");
    }

    /**
     * Clears the '<code>canDeleteTeamDrive</code>' attribute.
     */
    void clear_can_delete_team_drive() {
      MutableStorage()->removeMember("canDeleteTeamDrive");
    }


    /**
     * Get the value of the '<code>canDeleteTeamDrive</code>' attribute.
     */
    bool get_can_delete_team_drive() const {
      const Json::Value& storage = Storage("canDeleteTeamDrive");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>canDeleteTeamDrive</code>' attribute.
     *
     * Whether the current user can delete this Team Drive. Attempting to delete
     * the Team Drive may still fail if there are untrashed items inside the
     * Team Drive.
     *
     * @param[in] value The new value.
     */
    void set_can_delete_team_drive(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("canDeleteTeamDrive"));
    }

    /**
     * Determine if the '<code>canDownload</code>' attribute was set.
     *
     * @return true if the '<code>canDownload</code>' attribute was set.
     */
    bool has_can_download() const {
      return Storage().isMember("canDownload");
    }

    /**
     * Clears the '<code>canDownload</code>' attribute.
     */
    void clear_can_download() {
      MutableStorage()->removeMember("canDownload");
    }


    /**
     * Get the value of the '<code>canDownload</code>' attribute.
     */
    bool get_can_download() const {
      const Json::Value& storage = Storage("canDownload");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>canDownload</code>' attribute.
     *
     * Whether the current user can download files in this Team Drive.
     *
     * @param[in] value The new value.
     */
    void set_can_download(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("canDownload"));
    }

    /**
     * Determine if the '<code>canEdit</code>' attribute was set.
     *
     * @return true if the '<code>canEdit</code>' attribute was set.
     */
    bool has_can_edit() const {
      return Storage().isMember("canEdit");
    }

    /**
     * Clears the '<code>canEdit</code>' attribute.
     */
    void clear_can_edit() {
      MutableStorage()->removeMember("canEdit");
    }


    /**
     * Get the value of the '<code>canEdit</code>' attribute.
     */
    bool get_can_edit() const {
      const Json::Value& storage = Storage("canEdit");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>canEdit</code>' attribute.
     *
     * Whether the current user can edit files in this Team Drive.
     *
     * @param[in] value The new value.
     */
    void set_can_edit(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("canEdit"));
    }

    /**
     * Determine if the '<code>canListChildren</code>' attribute was set.
     *
     * @return true if the '<code>canListChildren</code>' attribute was set.
     */
    bool has_can_list_children() const {
      return Storage().isMember("canListChildren");
    }

    /**
     * Clears the '<code>canListChildren</code>' attribute.
     */
    void clear_can_list_children() {
      MutableStorage()->removeMember("canListChildren");
    }


    /**
     * Get the value of the '<code>canListChildren</code>' attribute.
     */
    bool get_can_list_children() const {
      const Json::Value& storage = Storage("canListChildren");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>canListChildren</code>' attribute.
     *
     * Whether the current user can list the children of folders in this Team
     * Drive.
     *
     * @param[in] value The new value.
     */
    void set_can_list_children(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("canListChildren"));
    }

    /**
     * Determine if the '<code>canManageMembers</code>' attribute was set.
     *
     * @return true if the '<code>canManageMembers</code>' attribute was set.
     */
    bool has_can_manage_members() const {
      return Storage().isMember("canManageMembers");
    }

    /**
     * Clears the '<code>canManageMembers</code>' attribute.
     */
    void clear_can_manage_members() {
      MutableStorage()->removeMember("canManageMembers");
    }


    /**
     * Get the value of the '<code>canManageMembers</code>' attribute.
     */
    bool get_can_manage_members() const {
      const Json::Value& storage = Storage("canManageMembers");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>canManageMembers</code>' attribute.
     *
     * Whether the current user can add members to this Team Drive or remove
     * them or change their role.
     *
     * @param[in] value The new value.
     */
    void set_can_manage_members(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("canManageMembers"));
    }

    /**
     * Determine if the '<code>canReadRevisions</code>' attribute was set.
     *
     * @return true if the '<code>canReadRevisions</code>' attribute was set.
     */
    bool has_can_read_revisions() const {
      return Storage().isMember("canReadRevisions");
    }

    /**
     * Clears the '<code>canReadRevisions</code>' attribute.
     */
    void clear_can_read_revisions() {
      MutableStorage()->removeMember("canReadRevisions");
    }


    /**
     * Get the value of the '<code>canReadRevisions</code>' attribute.
     */
    bool get_can_read_revisions() const {
      const Json::Value& storage = Storage("canReadRevisions");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>canReadRevisions</code>' attribute.
     *
     * Whether the current user can read the revisions resource of files in this
     * Team Drive.
     *
     * @param[in] value The new value.
     */
    void set_can_read_revisions(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("canReadRevisions"));
    }

    /**
     * Determine if the '<code>canRemoveChildren</code>' attribute was set.
     *
     * @return true if the '<code>canRemoveChildren</code>' attribute was set.
     */
    bool has_can_remove_children() const {
      return Storage().isMember("canRemoveChildren");
    }

    /**
     * Clears the '<code>canRemoveChildren</code>' attribute.
     */
    void clear_can_remove_children() {
      MutableStorage()->removeMember("canRemoveChildren");
    }


    /**
     * Get the value of the '<code>canRemoveChildren</code>' attribute.
     */
    bool get_can_remove_children() const {
      const Json::Value& storage = Storage("canRemoveChildren");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>canRemoveChildren</code>' attribute.
     *
     * Whether the current user can remove children from folders in this Team
     * Drive.
     *
     * @param[in] value The new value.
     */
    void set_can_remove_children(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("canRemoveChildren"));
    }

    /**
     * Determine if the '<code>canRename</code>' attribute was set.
     *
     * @return true if the '<code>canRename</code>' attribute was set.
     */
    bool has_can_rename() const {
      return Storage().isMember("canRename");
    }

    /**
     * Clears the '<code>canRename</code>' attribute.
     */
    void clear_can_rename() {
      MutableStorage()->removeMember("canRename");
    }


    /**
     * Get the value of the '<code>canRename</code>' attribute.
     */
    bool get_can_rename() const {
      const Json::Value& storage = Storage("canRename");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>canRename</code>' attribute.
     *
     * Whether the current user can rename files or folders in this Team Drive.
     *
     * @param[in] value The new value.
     */
    void set_can_rename(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("canRename"));
    }

    /**
     * Determine if the '<code>canRenameTeamDrive</code>' attribute was set.
     *
     * @return true if the '<code>canRenameTeamDrive</code>' attribute was set.
     */
    bool has_can_rename_team_drive() const {
      return Storage().isMember("canRenameTeamDrive");
    }

    /**
     * Clears the '<code>canRenameTeamDrive</code>' attribute.
     */
    void clear_can_rename_team_drive() {
      MutableStorage()->removeMember("canRenameTeamDrive");
    }


    /**
     * Get the value of the '<code>canRenameTeamDrive</code>' attribute.
     */
    bool get_can_rename_team_drive() const {
      const Json::Value& storage = Storage("canRenameTeamDrive");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>canRenameTeamDrive</code>' attribute.
     *
     * Whether the current user can rename this Team Drive.
     *
     * @param[in] value The new value.
     */
    void set_can_rename_team_drive(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("canRenameTeamDrive"));
    }

    /**
     * Determine if the '<code>canShare</code>' attribute was set.
     *
     * @return true if the '<code>canShare</code>' attribute was set.
     */
    bool has_can_share() const {
      return Storage().isMember("canShare");
    }

    /**
     * Clears the '<code>canShare</code>' attribute.
     */
    void clear_can_share() {
      MutableStorage()->removeMember("canShare");
    }


    /**
     * Get the value of the '<code>canShare</code>' attribute.
     */
    bool get_can_share() const {
      const Json::Value& storage = Storage("canShare");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>canShare</code>' attribute.
     *
     * Whether the current user can share files or folders in this Team Drive.
     *
     * @param[in] value The new value.
     */
    void set_can_share(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("canShare"));
    }

   private:
    void operator=(const TeamDriveCapabilities&);
  };  // TeamDriveCapabilities
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static TeamDrive* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TeamDrive(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TeamDrive(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~TeamDrive();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_drive_api::TeamDrive</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_drive_api::TeamDrive");
  }

  /**
   * Determine if the '<code>backgroundImageFile</code>' attribute was set.
   *
   * @return true if the '<code>backgroundImageFile</code>' attribute was set.
   */
  bool has_background_image_file() const {
    return Storage().isMember("backgroundImageFile");
  }

  /**
   * Clears the '<code>backgroundImageFile</code>' attribute.
   */
  void clear_background_image_file() {
    MutableStorage()->removeMember("backgroundImageFile");
  }


  /**
   * Get a reference to the value of the '<code>backgroundImageFile</code>'
   * attribute.
   */
  const TeamDriveBackgroundImageFile get_background_image_file() const {
     const Json::Value& storage = Storage("backgroundImageFile");
    return client::JsonValueToCppValueHelper<TeamDriveBackgroundImageFile >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>backgroundImageFile</code>' property.
   *
   * An image file and cropping parameters from which a background image for
   * this Team Drive is set. This is a write only field; it can only be set on
   * drive.teamdrives.update requests that don't set themeId. When specified,
   * all fields of the backgroundImageFile must be set.
   *
   * @return The result can be modified to change the attribute value.
   */
  TeamDriveBackgroundImageFile mutable_backgroundImageFile() {
    Json::Value* storage = MutableStorage("backgroundImageFile");
    return client::JsonValueToMutableCppValueHelper<TeamDriveBackgroundImageFile >(storage);
  }

  /**
   * Determine if the '<code>backgroundImageLink</code>' attribute was set.
   *
   * @return true if the '<code>backgroundImageLink</code>' attribute was set.
   */
  bool has_background_image_link() const {
    return Storage().isMember("backgroundImageLink");
  }

  /**
   * Clears the '<code>backgroundImageLink</code>' attribute.
   */
  void clear_background_image_link() {
    MutableStorage()->removeMember("backgroundImageLink");
  }


  /**
   * Get the value of the '<code>backgroundImageLink</code>' attribute.
   */
  const StringPiece get_background_image_link() const {
    const Json::Value& v = Storage("backgroundImageLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>backgroundImageLink</code>' attribute.
   *
   * A short-lived link to this Team Drive's background image.
   *
   * @param[in] value The new value.
   */
  void set_background_image_link(const StringPiece& value) {
    *MutableStorage("backgroundImageLink") = value.data();
  }

  /**
   * Determine if the '<code>capabilities</code>' attribute was set.
   *
   * @return true if the '<code>capabilities</code>' attribute was set.
   */
  bool has_capabilities() const {
    return Storage().isMember("capabilities");
  }

  /**
   * Clears the '<code>capabilities</code>' attribute.
   */
  void clear_capabilities() {
    MutableStorage()->removeMember("capabilities");
  }


  /**
   * Get a reference to the value of the '<code>capabilities</code>' attribute.
   */
  const TeamDriveCapabilities get_capabilities() const {
     const Json::Value& storage = Storage("capabilities");
    return client::JsonValueToCppValueHelper<TeamDriveCapabilities >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>capabilities</code>'
   * property.
   *
   * Capabilities the current user has on this Team Drive.
   *
   * @return The result can be modified to change the attribute value.
   */
  TeamDriveCapabilities mutable_capabilities() {
    Json::Value* storage = MutableStorage("capabilities");
    return client::JsonValueToMutableCppValueHelper<TeamDriveCapabilities >(storage);
  }

  /**
   * Determine if the '<code>colorRgb</code>' attribute was set.
   *
   * @return true if the '<code>colorRgb</code>' attribute was set.
   */
  bool has_color_rgb() const {
    return Storage().isMember("colorRgb");
  }

  /**
   * Clears the '<code>colorRgb</code>' attribute.
   */
  void clear_color_rgb() {
    MutableStorage()->removeMember("colorRgb");
  }


  /**
   * Get the value of the '<code>colorRgb</code>' attribute.
   */
  const StringPiece get_color_rgb() const {
    const Json::Value& v = Storage("colorRgb");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>colorRgb</code>' attribute.
   *
   * The color of this Team Drive as an RGB hex string. It can only be set on a
   * drive.teamdrives.update request that does not set themeId.
   *
   * @param[in] value The new value.
   */
  void set_color_rgb(const StringPiece& value) {
    *MutableStorage("colorRgb") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * The ID of this Team Drive which is also the ID of the top level folder for
   * this Team Drive.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * This is always drive#teamDrive.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * The name of this Team Drive.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>themeId</code>' attribute was set.
   *
   * @return true if the '<code>themeId</code>' attribute was set.
   */
  bool has_theme_id() const {
    return Storage().isMember("themeId");
  }

  /**
   * Clears the '<code>themeId</code>' attribute.
   */
  void clear_theme_id() {
    MutableStorage()->removeMember("themeId");
  }


  /**
   * Get the value of the '<code>themeId</code>' attribute.
   */
  const StringPiece get_theme_id() const {
    const Json::Value& v = Storage("themeId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>themeId</code>' attribute.
   *
   * The ID of the theme from which the background image and color will be set.
   * The set of possible teamDriveThemes can be retrieved from a drive.about.get
   * response. When not specified on a drive.teamdrives.insert request, a random
   * theme is chosen from which the background image and color are set. This is
   * a write-only field; it can only be set on requests that don't set colorRgb
   * or backgroundImageFile.
   *
   * @param[in] value The new value.
   */
  void set_theme_id(const StringPiece& value) {
    *MutableStorage("themeId") = value.data();
  }

 private:
  void operator=(const TeamDrive&);
};  // TeamDrive
}  // namespace google_drive_api
#endif  // GOOGLE_DRIVE_API_TEAM_DRIVE_H_
